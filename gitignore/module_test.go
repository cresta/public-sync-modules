package gitignore

import (
	"fmt"
	"testing"

	"github.com/getsyncer/syncer-core/files/stateloader"

	"github.com/getsyncer/syncer-core/files"

	"github.com/getsyncer/syncer-core/drifttest"
)

func TestModule(t *testing.T) {
	config := `
version: 1
logic:
  - source: github.com/getsyncer/syncer-core/drift/syncers/gitignore
syncs:
  - logic: gitignore
`
	t.Run("update-fresh-file", drifttest.WithRun(config, files.SimpleState(map[string]string{
		".gitignore": "foo\nbar\n",
	}), func(t *testing.T, items *drifttest.Items) {
		items.TestRun.MustExitCode(t, 0)
		drifttest.FileContains(t, ".gitignore", "AUTOGENERATED BY SYNCER")
		drifttest.FileContains(t, ".gitignore", "foo")
		drifttest.OnlyGitChanges(t, ".gitignore")
	}))
	config2 := `
version: 1
logic:
  - source: github.com/getsyncer/syncer-core/drift/syncers/gitignore
syncs:
  - logic: gitignore
    config:
      ignores:
        - explicit
`
	t.Run("change-ignore-content", drifttest.WithRun(config2, files.SimpleState(map[string]string{
		".gitignore": fmt.Sprintf("%s\nOriginal1\n%s\ntrailing", stateloader.RecommendedSectionStart, stateloader.RecommendedSectionEnd),
	}), func(t *testing.T, items *drifttest.Items) {
		items.TestRun.MustExitCode(t, 0)
		drifttest.FileContains(t, ".gitignore", "AUTOGENERATED BY SYNCER")
		drifttest.FileContains(t, ".gitignore", "explicit")
		drifttest.FileDoesNotContain(t, ".gitignore", "Original1")
		drifttest.OnlyGitChanges(t, ".gitignore")
	}))
}
